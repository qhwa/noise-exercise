{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","noise/perlin_noise_2d.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","GRID","GRID_MASK","template","_","k","x","y","l","Math","sqrt","normalizedVector","random","perlin","xNoise","yNoise","permutation","x0","y0","x1","y1","c00","getGradient","c01","c10","c11","tx","ty","u","smoothstep","v","p01","p10","p11","nx0","lerp","dot","nx1","a","b","t","a0","a1","seed","sort"],"mappings":"+FAGe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,CACtB,IAAK,IAAIG,EAAI,EAAGC,EAAO,IAAIH,MAAMD,EAAIK,QAASF,EAAIH,EAAIK,OAAQF,IAC5DC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,GDFF,CAAkBJ,IEJZ,SAA0BM,GACvC,GAAIC,OAAOC,YAAYC,OAAOH,IAAkD,uBAAzCG,OAAOC,UAAUC,SAASC,KAAKN,GAAgC,OAAOL,MAAMY,KAAKP,GFGvF,CAAgBN,IGJpC,WACb,MAAM,IAAIc,UAAU,mDHGqC,GAJ3D,mC,sIIAMC,EAAO,IACPC,EAAYD,EAAO,EAEnBE,EAAWhB,MAAMY,KAAK,CAACR,OAAQU,IAAO,SAACG,EAAGC,GAG9C,OAGF,YAAmC,IAAD,mBAAPC,EAAO,KAAJC,EAAI,KAC1BC,EAAIC,KAAKC,KAAKJ,EAAIA,EAAIC,EAAIA,GAChC,MAAO,CACLD,EAAIE,EACJD,EAAIC,GAPCG,CAAiB,CAFE,EAAhBF,KAAKG,SAAe,EACJ,EAAhBH,KAAKG,SAAe,OAYjB,SAASC,EAAOC,EAAQC,EAAQC,GAC7C,IAAMC,EAAKH,EAASZ,EACdgB,EAAKH,EAASb,EACdiB,EAAMF,EAAK,EAAKf,EAChBkB,EAAMF,EAAK,EAAKhB,EAEhBmB,EAAMC,EAAYL,EAAIC,EAAIF,GAC1BO,EAAMD,EAAYL,EAAIG,EAAIJ,GAC1BQ,EAAMF,EAAYH,EAAID,EAAIF,GAC1BS,EAAMH,EAAYH,EAAIC,EAAIJ,GAE1BU,EAAKZ,EAASG,EACdU,EAAKZ,EAASG,EACdU,EAAIC,EAAWH,GACfI,EAAID,EAAWF,GAGfI,EAAM,CAACL,EAAIC,EAAK,GAChBK,EAAM,CAACN,EAAK,EAAGC,GACfM,EAAM,CAACP,EAAK,EAAGC,EAAK,GAEpBO,EAAMC,EAAKC,EAAIf,EALT,CAACK,EAAIC,IAKeS,EAAIZ,EAAKQ,GAAMJ,GACzCS,EAAMF,EAAKC,EAAIb,EAAKQ,GAAMK,EAAIX,EAAKQ,GAAML,GAG/C,OAAuB,KADTO,EAAKD,EAAKG,EAAKP,GACb,IAGlB,SAASR,EAAYhB,EAAGC,EAAGS,GACzB,OAAOb,EAAUa,EAAaA,EAAYV,GAAKC,EAAKL,GAAcA,GAGpE,SAASkC,EAAT,KAA8B,IAAD,mBAAfE,EAAe,KAAZC,EAAY,wBAC3B,OAAOD,EADoB,KACZC,EADY,KAI7B,SAASV,EAAWW,GAClB,OAAOA,EAAIA,EAAIA,GAAKA,GAAS,EAAJA,EAAQ,IAAM,IAGzC,SAASL,EAAKM,EAAIC,EAAIF,GACpB,OAAQ,EAAIA,GAAKC,EAAKD,EAAIE,EAGrB,SAASC,IACd,IAAMzD,EAAMC,MAAMY,KAAK,CAACR,OAAQU,IAAO,SAACG,EAAGC,GAAJ,OAAUA,KAAGuC,MAAK,kBAAMnC,KAAKG,SAAW,MAC/E,MAAM,GAAN,mBAAW1B,GAAX,YAAmBA","file":"static/js/1.fbe86d93.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","const GRID = 256; // 纹理划分 256 个格子\nconst GRID_MASK = GRID - 1;\n\nconst template = Array.from({length: GRID}, (_, k) => {\n  const x = Math.random() * 2 - 1;\n  const y = Math.random() * 2 - 1;\n  return normalizedVector([x, y]);\n});\n\nfunction normalizedVector([x, y]) {\n  const l = Math.sqrt(x * x + y * y);\n  return [\n    x / l,\n    y / l\n  ];\n}\n\nexport default function perlin(xNoise, yNoise, permutation) {\n  const x0 = xNoise & GRID_MASK;\n  const y0 = yNoise & GRID_MASK;\n  const x1 = (x0 + 1) & GRID_MASK;\n  const y1 = (y0 + 1) & GRID_MASK;\n\n  const c00 = getGradient(x0, y0, permutation);\n  const c01 = getGradient(x0, y1, permutation);\n  const c10 = getGradient(x1, y0, permutation);\n  const c11 = getGradient(x1, y1, permutation);\n\n  const tx = xNoise - x0;\n  const ty = yNoise - y0;\n  const u = smoothstep(tx);\n  const v = smoothstep(ty);\n\n  const p00 = [tx, ty];\n  const p01 = [tx, ty - 1];\n  const p10 = [tx - 1, ty];\n  const p11 = [tx - 1, ty - 1];\n\n  const nx0 = lerp(dot(c00, p00), dot(c10, p10), u);\n  const nx1 = lerp(dot(c01, p01), dot(c11, p11), u);\n\n  const value = lerp(nx0, nx1, v);\n  return (value + 0.5) * 256;\n}\n\nfunction getGradient(x, y, permutation) {\n  return template[(permutation[(permutation[x] + y) & GRID_MASK]) & GRID_MASK];\n}\n\nfunction dot([a, b], [c, d]) {\n  return a * c + b * d;\n}\n\nfunction smoothstep(t) {\n  return t * t * t * (t * (t * 6 - 15) + 10);\n}\n\nfunction lerp(a0, a1, t) {\n  return (1 - t) * a0 + t * a1;\n}\n\nexport function seed() {\n  const arr = Array.from({length: GRID}, (_, k) => k).sort(() => Math.random() - 0.5);\n  return [...arr, ...arr];\n}\n"],"sourceRoot":""}