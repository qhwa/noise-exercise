{"version":3,"sources":["noise lazy /^/.//.*$/ groupOptions: {} namespace object","noise.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","permutation","generateNoise","key","type","w","h","t","l","g","seed","default","call","generateImage","mask","a","grey","numbers","Uint8ClampedArray","from","length","_","k","idx","maskTransform","i","ImageData","n","Math","floor","sliderStyle","background","App","canvasEl","useRef","useState","setTime","setLattice","setType","setMask","useEffect","refresh","ref","className","onChange","target","value","checked","max","style","min","canvas","current","width","height","ctx","getContext","image","putImageData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.899393c1.chunk.js","sourcesContent":["var map = {\n\t\"./improved_perlin_noise_2d\": [\n\t\t6,\n\t\t0\n\t],\n\t\"./improved_perlin_noise_2d.js\": [\n\t\t6,\n\t\t0\n\t],\n\t\"./perlin_noise_2d\": [\n\t\t7,\n\t\t1\n\t],\n\t\"./perlin_noise_2d.js\": [\n\t\t7,\n\t\t1\n\t],\n\t\"./value_noise_1d\": [\n\t\t8,\n\t\t2\n\t],\n\t\"./value_noise_1d.js\": [\n\t\t8,\n\t\t2\n\t],\n\t\"./value_noise_2d\": [\n\t\t9,\n\t\t3\n\t],\n\t\"./value_noise_2d.js\": [\n\t\t9,\n\t\t3\n\t],\n\t\"./white_noise\": [\n\t\t10,\n\t\t4\n\t],\n\t\"./white_noise.js\": [\n\t\t10,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 18;\nmodule.exports = webpackAsyncContext;","const permutation = {\n};\n\nexport default function generateNoise(key, type, w, h, t = 0, l = 100) {\n  return import(`./noise/${type}`).then(\n    g => {\n      key = `${type}_${key}`;\n      permutation[key] = permutation[key] || g.seed();\n      return g.default.call(null, w, h, t, l, permutation[key]);\n    }\n  );\n}\n","import React, {useRef, useState, useEffect} from 'react';\nimport generateNoise from './noise';\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\n\nfunction App() {\n  const canvasEl = useRef(null);\n  const [t, setTime] = useState(50);\n  const [l, setLattice] = useState(50);\n  const [type, setType] = useState('perlin_noise_2d');\n  const [mask, setMask] = useState(false);\n\n  useEffect(() => {\n    refresh();\n  });\n\n  return (\n    <main>\n      <canvas ref={canvasEl} />\n      <form>\n        <div className=\"field\">\n          <label className=\"label\">noise type</label>\n          <div className=\"select\">\n            <select onChange={e => setType(e.target.value)} value={type}>\n              <option value=\"white_noise\">white noise</option>\n              <option value=\"value_noise_1d\">value noise 1D</option>\n              <option value=\"value_noise_2d\">value noise 2D</option>\n              <option value=\"perlin_noise_2d\">original Perlin noise 2D</option>\n              <option value=\"improved_perlin_noise_2d\">improved Perlin noise 2D</option>\n            </select>\n          </div>\n        </div>\n        \n        <div className=\"field\">\n          <div className=\"control\">\n            <label className=\"checkbox\">\n              <input type=\"checkbox\" value={mask} onChange={\n                e => setMask(e.target.checked)\n              } />\n              apply mask\n            </label>\n          </div>\n        </div>\n      \n        <div className=\"field\">\n          <label className=\"label\">offset: {t}</label>\n          <input\n            type=\"range\"\n            max=\"100\"\n            value={t}\n            onChange={e => {\n              setTime(e.target.value);\n            }}\n            style={sliderStyle(t)}\n          />\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\">lattice: {l}</label>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"256\"\n            value={l}\n            onChange={e => {\n              setLattice(e.target.value);\n            }}\n            style={sliderStyle((l - 1) / 255 * 100)}\n          />\n        </div>\n      </form>\n    </main>\n  );\n\n  async function refresh() {\n    const canvas = canvasEl.current;\n    const {width, height} = canvas;\n    const ctx = canvas.getContext('2d');\n\n    const image = await generateImage(type, width, height, mask, t, l);\n    ctx.putImageData(image, 0, 0);\n  }\n}\n\nasync function generateImage(type, w, h, mask, t, l) {\n  const grey = await generateNoise('grey', type, w, h, t, l);\n\n  const numbers = Uint8ClampedArray.from({length: w * h * 4}, (_, k) => {\n    const idx = k >> 2;\n    const type = k % 4;\n\n    if (type < 3) {\n      return mask ? maskTransform(grey[idx], {w, h, i: idx}) : grey[idx];\n    }\n    return 255;\n  });\n\n  return new ImageData(numbers, w, h);\n}\n\nfunction maskTransform(n, {w, h, i}) {\n  return (n * Math.floor(i / w) / h) & 255;\n}\n\nfunction sliderStyle(t) {\n  return {\n    background: `linear-gradient(90deg,#3273dc ${t}%, rgba(0,0,0,0.216) 0)`\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}