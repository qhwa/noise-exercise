{"version":3,"sources":["noise/value_noise_2d.js"],"names":["GRID","GRID_MASK","SPEED","template","Array","from","length","_","k","Math","floor","random","valueNoise2D","w","h","t","Uint8ClampedArray","x","y","xNoise","normalize","yNoise","x0","y0","c00","c01","c10","c11","tx","smoothRemap","ty","nx0","lerp","nx1","value","offset","cos","PI","minX","minY"],"mappings":"wJAAMA,EAAO,IACPC,EAAYD,EAAO,EACnBE,EAAQ,CAAC,EAAG,GAEZC,EAAWC,MAAMC,KAAK,CAACC,OAAQN,EAAOA,IAAO,SAACO,EAAGC,GACrD,MAAO,CACLC,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,cAIL,SAASC,EAAaC,EAAGC,EAAGC,GACzC,OAAOC,kBAAkBX,KAAK,CAACC,OAAQO,EAAIC,IAAI,SAACP,EAAGC,GACjD,IAAMS,EAAIT,EAAIK,EACRK,EAAIT,KAAKC,MAAMF,EAAIK,GACnBM,EAASC,EAAUH,EAAGF,EAAIb,EAAM,IAAMF,EACtCqB,EAASD,EAAUF,EAAGH,EAAIb,EAAM,IAAMF,EACtCsB,EAAKH,EAASlB,EACdsB,EAAKF,EAASpB,EACduB,EAAMrB,EAASmB,EAAKC,EAAKvB,GACzByB,EAAMtB,EAASmB,GAAMC,EAAK,GAAKvB,GAC/B0B,EAAMvB,EAASmB,EAAK,EAAIC,EAAKvB,GAC7B2B,EAAMxB,EAASmB,EAAK,GAAKC,EAAK,GAAKvB,GACnC4B,EAAKC,EAAYV,EAASG,GAC1BQ,EAAKD,EAAYR,EAASE,GAE1BQ,EAAMC,EAAKR,EAAKE,EAAKE,GACrBK,EAAMD,EAAKP,EAAKE,EAAKC,GAErBM,EAAQF,EAAKD,EAAKE,EAAKH,GAC7B,OAAQI,EAAM,GAAKA,EAAM,IAAM,KAInC,SAASd,EAAUH,EAAGkB,GACpB,OAAQlB,EAAIkB,GAAU,GAGxB,SAASN,EAAYd,GACnB,MAAqC,IAA7B,EAAIN,KAAK2B,IAAIrB,EAAIN,KAAK4B,KAGhC,SAASL,EAAT,IAA0CjB,GAAI,IAAD,mBAA9BuB,EAA8B,KAAxBC,EAAwB,wBAC3C,MAAO,CACLD,GAFyC,KAE1BA,GAAQvB,EACvBwB,GAHyC,KAG1BA,GAAQxB","file":"static/js/1.bd99aa94.chunk.js","sourcesContent":["const GRID = 256; // 纹理划分 256 个格子\nconst GRID_MASK = GRID - 1;\nconst SPEED = [2, 2];\n\nconst template = Array.from({length: GRID * GRID}, (_, k) => {\n  return [\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255)\n  ]\n});\n\nexport default function valueNoise2D(w, h, t) {\n  return Uint8ClampedArray.from({length: w * h}, (_, k) => {\n    const x = k % w;\n    const y = Math.floor(k / w);\n    const xNoise = normalize(x, t * SPEED[0]) % GRID;\n    const yNoise = normalize(y, t * SPEED[1]) % GRID;\n    const x0 = xNoise & GRID_MASK;\n    const y0 = yNoise & GRID_MASK;\n    const c00 = template[x0 + y0 * GRID];\n    const c01 = template[x0 + (y0 + 1) * GRID];\n    const c10 = template[x0 + 1 + y0 * GRID];\n    const c11 = template[x0 + 1 + (y0 + 1) * GRID];\n    const tx = smoothRemap(xNoise - x0);\n    const ty = smoothRemap(yNoise - y0);\n\n    const nx0 = lerp(c00, c10, tx);\n    const nx1 = lerp(c01, c11, tx);\n\n    const value = lerp(nx0, nx1, ty);\n    return (value[0] + value[1]) / 2;\n  });\n}\n\nfunction normalize(x, offset) {\n  return (x + offset) / 10;\n}\n\nfunction smoothRemap(t) {\n  return (1 - Math.cos(t * Math.PI)) * 0.5;\n}\n\nfunction lerp([minX, minY], [maxX, maxY], t) {\n  return [\n    minX + (maxX - minX) * t,\n    minY + (maxY - minY) * t\n  ];\n}\n"],"sourceRoot":""}