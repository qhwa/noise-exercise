{"version":3,"sources":["noise/value_noise_1d.js"],"names":["GRID","GRID_MASK","valueNoise1D","x","y","permutation","t","x0","x1","min","max","lerp","Math","cos","PI","seed","Array","from","length","_","k","floor","random"],"mappings":"8FAAA,wFAAMA,EAAO,IACPC,EAAYD,EAAO,EAEV,SAASE,EAAaC,EAAGC,EAAGC,GACzC,IAMkBC,EANZC,EAAKJ,EAAIF,EACTO,EAAMD,EAAK,EAAKN,EAEtB,OAOF,SAAcQ,EAAKC,EAAKJ,GACtB,OAAOG,GAAOC,EAAMD,GAAOH,EARpBK,CAAKN,EAAYE,GAAKF,EAAYG,IAGvBF,EAHuCH,EAAII,EAIxB,IAA7B,EAAIK,KAAKC,IAAIP,EAAIM,KAAKE,OAOzB,SAASC,IACd,OAAOC,MAAMC,KAAK,CAACC,OAAQlB,IAAO,SAACmB,EAAGC,GACpC,OAAOR,KAAKS,MAAsB,IAAhBT,KAAKU","file":"static/js/2.77562fdf.chunk.js","sourcesContent":["const GRID = 256; // 纹理划分 256 个格子\nconst GRID_MASK = GRID - 1;\n\nexport default function valueNoise1D(x, y, permutation) {\n  const x0 = x & GRID_MASK;\n  const x1 = (x0 + 1) & GRID_MASK;\n\n  return lerp(permutation[x0], permutation[x1], smoothstep(x - x0));\n}\n\nfunction smoothstep(t) {\n  return (1 - Math.cos(t * Math.PI)) * 0.5;\n}\n\nfunction lerp(min, max, t) {\n  return min + (max - min) * t;\n}\n\nexport function seed() {\n  return Array.from({length: GRID}, (_, k) => {\n    return Math.floor(Math.random() * 255);\n  });\n}\n"],"sourceRoot":""}