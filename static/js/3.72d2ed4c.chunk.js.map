{"version":3,"sources":["noise/value_noise_2d.js"],"names":["GRID","GRID_MASK","SPEED","seed","Array","from","length","_","k","Math","floor","random","valueNoise2D","w","h","t","l","template","Uint8ClampedArray","x","y","xNoise","yNoise","x0","y0","x1","y1","c00","c01","c10","c11","tx","smoothstep","ty","nx0","lerp","nx1","value","cos","PI","minX","minY"],"mappings":"6LAAMA,EAAO,IACPC,EAAYD,EAAO,EACnBE,EAAQ,CAAC,EAAG,GAEX,SAASC,IACd,OAAOC,MAAMC,KAAK,CAACC,OAAQN,EAAOA,IAAO,SAACO,EAAGC,GAC3C,MAAO,CACLC,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,cAKP,SAASC,EAAaC,EAAGC,EAAGC,EAAGC,EAAGC,GAC/C,OAAOC,kBAAkBb,KAAK,CAACC,OAAQO,EAAIC,IAAI,SAACP,EAAGC,GACjD,IAAMW,EAAIX,EAAIK,EACRO,EAAIX,KAAKC,MAAMF,EAAIK,GACnBQ,GAAWF,EAAIJ,EAAIb,EAAM,IAAMc,EAAKhB,EACpCsB,GAAWF,EAAIL,EAAIb,EAAM,IAAMc,EAAKhB,EACpCuB,EAAKF,EAASpB,EACduB,EAAKF,EAASrB,EACdwB,EAAMF,EAAK,EAAKtB,EAChByB,EAAMF,EAAK,EAAKvB,EAChB0B,EAAMV,EAASM,EAAKC,EAAKxB,GACzB4B,EAAMX,EAASM,EAAKG,EAAK1B,GACzB6B,EAAMZ,EAASQ,EAAKD,EAAKxB,GACzB8B,EAAMb,EAASQ,EAAKC,EAAK1B,GACzB+B,EAAKC,EAAWX,EAASE,GACzBU,EAAKD,EAAWV,EAASE,GAEzBU,EAAMC,EAAKR,EAAKE,EAAKE,GACrBK,EAAMD,EAAKP,EAAKE,EAAKC,GAErBM,EAAQF,EAAKD,EAAKE,EAAKH,GAC7B,OAAQI,EAAM,GAAKA,EAAM,IAAM,KAInC,SAASL,EAAWjB,GAClB,MAAqC,IAA7B,EAAIN,KAAK6B,IAAIvB,EAAIN,KAAK8B,KAGhC,SAASJ,EAAT,IAA0CpB,GAAI,IAAD,mBAA9ByB,EAA8B,KAAxBC,EAAwB,wBAC3C,MAAO,CACLD,GAFyC,KAE1BA,GAAQzB,EACvB0B,GAHyC,KAG1BA,GAAQ1B","file":"static/js/3.72d2ed4c.chunk.js","sourcesContent":["const GRID = 256; // 纹理划分 256 个格子\nconst GRID_MASK = GRID - 1;\nconst SPEED = [2, 2];\n\nexport function seed() {\n  return Array.from({length: GRID * GRID}, (_, k) => {\n    return [\n      Math.floor(Math.random() * 255),\n      Math.floor(Math.random() * 255)\n    ]\n  });\n}\n\nexport default function valueNoise2D(w, h, t, l, template) {\n  return Uint8ClampedArray.from({length: w * h}, (_, k) => {\n    const x = k % w;\n    const y = Math.floor(k / w);\n    const xNoise = ((x + t * SPEED[0]) / l) % GRID;\n    const yNoise = ((y + t * SPEED[1]) / l) % GRID;\n    const x0 = xNoise & GRID_MASK;\n    const y0 = yNoise & GRID_MASK;\n    const x1 = (x0 + 1) & GRID_MASK;\n    const y1 = (y0 + 1) & GRID_MASK;\n    const c00 = template[x0 + y0 * GRID];\n    const c01 = template[x0 + y1 * GRID];\n    const c10 = template[x1 + y0 * GRID];\n    const c11 = template[x1 + y1 * GRID];\n    const tx = smoothstep(xNoise - x0);\n    const ty = smoothstep(yNoise - y0);\n\n    const nx0 = lerp(c00, c10, tx);\n    const nx1 = lerp(c01, c11, tx);\n\n    const value = lerp(nx0, nx1, ty);\n    return (value[0] + value[1]) / 2;\n  });\n}\n\nfunction smoothstep(t) {\n  return (1 - Math.cos(t * Math.PI)) * 0.5;\n}\n\nfunction lerp([minX, minY], [maxX, maxY], t) {\n  return [\n    minX + (maxX - minX) * t,\n    minY + (maxY - minY) * t\n  ];\n}\n"],"sourceRoot":""}