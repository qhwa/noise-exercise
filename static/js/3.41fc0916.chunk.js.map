{"version":3,"sources":["noise/value_noise_2d.js"],"names":["GRID","GRID_MASK","seed","Array","from","length","_","k","Math","floor","random","valueNoise2D","x","y","template","x0","y0","x1","y1","c00","c01","c10","c11","tx","smoothstep","ty","nx0","lerp","nx1","value","t","cos","PI","minX","minY"],"mappings":"6LAAMA,EAAO,IACPC,EAAYD,EAAO,EAElB,SAASE,IACd,OAAOC,MAAMC,KAAK,CAACC,OAAQL,EAAOA,IAAO,SAACM,EAAGC,GAC3C,MAAO,CACLC,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,cAKP,SAASC,EAAaC,EAAGC,EAAGC,GACzC,IAAMC,EAAKH,EAAIX,EACTe,EAAKH,EAAIZ,EACTgB,EAAMF,EAAK,EAAKd,EAChBiB,EAAMF,EAAK,EAAKf,EAChBkB,EAAML,EAASC,EAAKC,EAAKhB,GACzBoB,EAAMN,EAASC,EAAKG,EAAKlB,GACzBqB,EAAMP,EAASG,EAAKD,EAAKhB,GACzBsB,EAAMR,EAASG,EAAKC,EAAKlB,GACzBuB,EAAKC,EAAWZ,EAAIG,GACpBU,EAAKD,EAAWX,EAAIG,GAEpBU,EAAMC,EAAKR,EAAKE,EAAKE,GACrBK,EAAMD,EAAKP,EAAKE,EAAKC,GAErBM,EAAQF,EAAKD,EAAKE,EAAKH,GAC7B,OAAQI,EAAM,GAAKA,EAAM,IAAM,EAGjC,SAASL,EAAWM,GAClB,MAAqC,IAA7B,EAAItB,KAAKuB,IAAID,EAAItB,KAAKwB,KAGhC,SAASL,EAAT,IAA0CG,GAAI,IAAD,mBAA9BG,EAA8B,KAAxBC,EAAwB,wBAC3C,MAAO,CACLD,GAFyC,KAE1BA,GAAQH,EACvBI,GAHyC,KAG1BA,GAAQJ","file":"static/js/3.41fc0916.chunk.js","sourcesContent":["const GRID = 256; // 纹理划分 256 个格子\nconst GRID_MASK = GRID - 1;\n\nexport function seed() {\n  return Array.from({length: GRID * GRID}, (_, k) => {\n    return [\n      Math.floor(Math.random() * 255),\n      Math.floor(Math.random() * 255)\n    ]\n  });\n}\n\nexport default function valueNoise2D(x, y, template) {\n  const x0 = x & GRID_MASK;\n  const y0 = y & GRID_MASK;\n  const x1 = (x0 + 1) & GRID_MASK;\n  const y1 = (y0 + 1) & GRID_MASK;\n  const c00 = template[x0 + y0 * GRID];\n  const c01 = template[x0 + y1 * GRID];\n  const c10 = template[x1 + y0 * GRID];\n  const c11 = template[x1 + y1 * GRID];\n  const tx = smoothstep(x - x0);\n  const ty = smoothstep(y - y0);\n\n  const nx0 = lerp(c00, c10, tx);\n  const nx1 = lerp(c01, c11, tx);\n\n  const value = lerp(nx0, nx1, ty);\n  return (value[0] + value[1]) / 2;\n}\n\nfunction smoothstep(t) {\n  return (1 - Math.cos(t * Math.PI)) * 0.5;\n}\n\nfunction lerp([minX, minY], [maxX, maxY], t) {\n  return [\n    minX + (maxX - minX) * t,\n    minY + (maxY - minY) * t\n  ];\n}\n"],"sourceRoot":""}